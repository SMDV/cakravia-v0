name: Zero-Downtime Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_version:
        description: 'Deployment version (optional)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint
      continue-on-error: false

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}

    - name: Generate deployment version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.deployment_version }}" ]; then
          echo "version=${{ github.event.inputs.deployment_version }}" >> $GITHUB_OUTPUT
        else
          echo "version=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi

    - name: Zero-Downtime Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 25m
        command_timeout: 25m
        envs: NEXT_PUBLIC_GOOGLE_CLIENT_ID,DEPLOYMENT_VERSION,GITHUB_SHA,GITHUB_REF
        script: |
          set -e
          
          echo "üöÄ Starting Zero-Downtime Blue-Green Deployment"
          echo "Version: ${DEPLOYMENT_VERSION}"
          echo "Commit: ${GITHUB_SHA}"
          echo "Branch: ${GITHUB_REF}"
          
          # Check if application directory exists
          if [ ! -d "/opt/cakravia" ]; then
            echo "Creating application directory..."
            sudo mkdir -p /opt/cakravia
            sudo chown $USER:$USER /opt/cakravia
          fi
          
          # Navigate to application directory
          cd /opt/cakravia
          
          # Check if this is first deployment
          if [ ! -f "docker-compose.blue-green.yml" ]; then
            echo "First deployment - cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
            
            # Initial setup for first deployment
            echo "Setting up for first deployment..."
            
            # Create environment file
            cat > .env << EOF
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
          DEPLOYMENT_VERSION=${DEPLOYMENT_VERSION}
          DEPLOYMENT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GITHUB_SHA=${GITHUB_SHA}
          EOF
            
            # Create nginx directories
            mkdir -p nginx/ssl nginx/logs monitoring
            
            # Set up initial nginx configuration for blue deployment
            if [ -f "nginx/nginx.blue.conf" ]; then
              sed -e "s/{{TIMESTAMP}}/$(date -u +"%Y-%m-%dT%H:%M:%SZ")/g" -e "s/{{VERSION}}/${DEPLOYMENT_VERSION}/g" nginx/nginx.blue.conf > nginx/nginx.conf
            elif [ -f "nginx/nginx.blue-green.conf" ]; then
              cp nginx/nginx.blue-green.conf nginx/nginx.conf
            fi
            
            # Start initial blue deployment
            echo "Starting initial blue deployment..."
            docker-compose -f docker-compose.blue-green.yml up -d app-blue nginx
            
            # Wait for initial deployment
            echo "Waiting for initial deployment to be ready..."
            sleep 45
            
            # Check initial deployment health
            for i in {1..10}; do
              if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
                echo "‚úÖ Initial deployment is healthy!"
                break
              else
                echo "Health check $i/10 failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
            
            echo "‚úÖ First deployment completed successfully!"
          else
            echo "Updating existing repository..."
            git fetch origin
            git reset --hard origin/main
            
            # Update environment file
            cat > .env << EOF
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
          DEPLOYMENT_VERSION=${DEPLOYMENT_VERSION}
          DEPLOYMENT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GITHUB_SHA=${GITHUB_SHA}
          EOF
            
            # Clean up orphaned containers before deployment
            echo "Cleaning up orphaned containers..."
            docker-compose -f docker-compose.blue-green.yml down --remove-orphans
            docker system prune -f
            
            # Run zero-downtime deployment
            echo "Running zero-downtime deployment..."
            if [ -f "scripts/deploy-zero-downtime.sh" ]; then
              chmod +x scripts/deploy-zero-downtime.sh
              if ./scripts/deploy-zero-downtime.sh "${DEPLOYMENT_VERSION}"; then
                echo "‚úÖ Zero-downtime deployment completed successfully!"
              else
                echo "‚ùå Zero-downtime deployment failed!"
                exit 1
              fi
            else
              echo "‚ùå Zero-downtime deployment script not found!"
              exit 1
            fi
          fi
          
          # Post-deployment verification
          echo "üîç Running post-deployment verification..."
          
          # Check container status
          echo "Container status:"
          docker-compose -f docker-compose.blue-green.yml ps
          
          # Comprehensive health checks
          echo "Testing health endpoints..."
          
          # Test main health endpoint
          if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
            echo "‚úÖ Main health check passed"
          else
            echo "‚ùå Main health check failed"
            exit 1
          fi
          
          # Test readiness endpoint
          if curl -f http://localhost:8080/api/health/ready > /dev/null 2>&1; then
            echo "‚úÖ Readiness check passed"
          else
            echo "‚ö†Ô∏è  Readiness check failed"
          fi
          
          # Test liveness endpoint
          if curl -f http://localhost:8080/api/health/live > /dev/null 2>&1; then
            echo "‚úÖ Liveness check passed"
          else
            echo "‚ö†Ô∏è  Liveness check failed"
          fi
          
          # Test deployment status endpoint
          if curl -f http://localhost:8080/api/deployment/status > /dev/null 2>&1; then
            echo "‚úÖ Deployment status endpoint accessible"
          else
            echo "‚ö†Ô∏è  Deployment status endpoint failed"
          fi
          
          # Test application pages
          if curl -f -s http://localhost:8080/ > /dev/null 2>&1; then
            echo "‚úÖ Application homepage accessible"
          else
            echo "‚ùå Application homepage failed"
            exit 1
          fi
          
          # Display deployment information
          echo ""
          echo "üéâ Deployment Summary:"
          echo "   Version: ${DEPLOYMENT_VERSION}"
          echo "   Commit: ${GITHUB_SHA}"
          echo "   Time: $(date)"
          echo "   URL: https://cakravia.com"
          echo ""
          
          # Show current deployment status
          echo "üìä Current Deployment Status:"
          curl -s http://localhost:8080/api/deployment/status | jq '.' 2>/dev/null || echo "Could not fetch deployment status"
          
          echo "‚úÖ Zero-downtime deployment completed successfully!"
      env:
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
        DEPLOYMENT_VERSION: ${{ steps.version.outputs.version }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}

    - name: Health Check Verification
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 5m
        script: |
          cd /opt/cakravia
          
          echo "üè• Running final health verification..."
          
          # Wait a bit for the deployment to stabilize
          sleep 30
          
          # Final comprehensive health check
          for i in {1..3}; do
            echo "Health check round $i/3..."
            
            if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
              echo "‚úÖ Health check $i passed"
            else
              echo "‚ùå Health check $i failed"
              exit 1
            fi
            
            sleep 10
          done
          
          echo "‚úÖ Final health verification completed!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üéâ Zero-downtime deployment to cakravia.com successful!"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Commit: ${{ github.sha }}"
        else
          echo "‚ùå Zero-downtime deployment failed!"
          exit 1
        fi

    - name: Rollback on Failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 10m
        script: |
          cd /opt/cakravia
          
          echo "üîÑ Deployment failed, checking if rollback is needed..."
          
          # Check if backup configuration exists
          if [ -f "nginx/nginx.conf.backup" ]; then
            echo "Restoring previous nginx configuration..."
            cp nginx/nginx.conf.backup nginx/nginx.conf
            docker cp nginx/nginx.conf cakravia-nginx:/etc/nginx/nginx.conf || true
            docker exec cakravia-nginx nginx -s reload || true
          fi
          
          # Show current container status
          echo "Current container status:"
          docker-compose -f docker-compose.blue-green.yml ps || true
          
          # Show recent logs
          echo "Recent application logs:"
          docker-compose -f docker-compose.blue-green.yml logs --tail=20 || true
          
          echo "‚ö†Ô∏è  Rollback completed. Please check the application status."