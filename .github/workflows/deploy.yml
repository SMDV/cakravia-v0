name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        envs: NEXT_PUBLIC_GOOGLE_CLIENT_ID
        script: |
          # Check if application directory exists
          if [ ! -d "/opt/cakravia" ]; then
            echo "Creating application directory..."
            sudo mkdir -p /opt/cakravia
            sudo chown $USER:$USER /opt/cakravia
          fi
          
          # Navigate to application directory
          cd /opt/cakravia
          
          # Check if this is first deployment
          if [ ! -f "docker-compose.yml" ]; then
            echo "First deployment - cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo "Updating existing repository..."
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Create environment file with all required variables
          cat > .env.production << EOF
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
          EOF
          
          # Stop existing containers (ignore errors if none exist)
          docker-compose down || true
          
          # Remove old images to save space
          docker image prune -f || true
          
          # Create nginx directories if they don't exist
          mkdir -p nginx/ssl nginx/logs
          
          # Build and start new containers
          docker-compose build --no-cache
          docker-compose up -d
          
          # Wait for containers to be ready
          echo "Waiting for containers to start..."
          sleep 30
          
          # Check if containers are running
          echo "Container status:"
          docker-compose ps
          
          # Test health endpoint with retry
          echo "Testing health endpoint..."
          for i in {1..5}; do
            if curl -f http://localhost:3000/api/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "Health check failed, retrying in 10 seconds... ($i/5)"
              sleep 10
            fi
          done
          
          # Final container status
          docker-compose ps
          echo "✅ Deployment completed!"
      env:
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Deployment to cakravia.com successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi